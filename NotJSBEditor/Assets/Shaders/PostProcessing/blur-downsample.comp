#version 440

layout(local_size_x = 8, local_size_y = 8) in;

layout(r11f_g11f_b10f, binding = 0) uniform image2D img_output;
layout(location = 0) uniform sampler2D source;

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(img_output);
	
	vec2 texelSize = 1.0 / vec2(size);
	vec2 coords = pixelCoords / vec2(size) + texelSize * 0.5;

	vec3 A = texture(source, coords + texelSize * vec2(-1.0, -1.0)).rgb;
    vec3 B = texture(source, coords + texelSize * vec2( 0.0, -1.0)).rgb;
    vec3 C = texture(source, coords + texelSize * vec2( 1.0, -1.0)).rgb;
    vec3 D = texture(source, coords + texelSize * vec2(-0.5, -0.5)).rgb;
    vec3 E = texture(source, coords + texelSize * vec2( 0.5, -0.5)).rgb;
    vec3 F = texture(source, coords + texelSize * vec2(-1.0,  0.0)).rgb;
    vec3 G = texture(source, coords                               ).rgb;
    vec3 H = texture(source, coords + texelSize * vec2( 1.0,  0.0)).rgb;
    vec3 I = texture(source, coords + texelSize * vec2(-0.5,  0.5)).rgb;
    vec3 J = texture(source, coords + texelSize * vec2( 0.5,  0.5)).rgb;
    vec3 K = texture(source, coords + texelSize * vec2(-1.0,  1.0)).rgb;
    vec3 L = texture(source, coords + texelSize * vec2( 0.0,  1.0)).rgb;
    vec3 M = texture(source, coords + texelSize * vec2( 1.0,  1.0)).rgb;

	vec2 div = (1.0 / 4.0) * vec2(0.5, 0.125);

    vec3 o;
	o  = (D + E + I + J) * div.x;
    o += (A + B + G + F) * div.y;
    o += (B + C + H + G) * div.y;
    o += (F + G + L + K) * div.y;
    o += (G + H + M + L) * div.y;

	imageStore(img_output, pixelCoords, vec4(o * 0.7, 1.0));
}